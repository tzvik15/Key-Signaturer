{"version":3,"sources":["components/start/Start.js","components/learn/Learn.js","components/relative/Relative.js","components/sharps/Sharps.js","components/flats/Flats.js","components/quiz/Quiz.js","components/play/Play.js","App.js","serviceWorker.js","index.js"],"names":["Start","className","Button","to","Learn","useState","q1","major","q2","isCorF","q3","hasFlat","state","setState","reset","log","console","lassName","onClick","Relative","scales","yes","no","count","setCount","rand","setRand","correct","setCorrect","start","play","setPlay","useEffect","answer","selected","event","target","innerText","random","rand1","Math","floor","length","sort","map","item","Sharps","Flats","Quiz","Play","choice","rk","sk","fk","qy","choiceState","setChoiceState","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.23536eba.chunk.js","sourcesContent":["import React from \"react\";\nimport {Button} from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport \"../start/start.css\"\n\nfunction Start() {\n    return (\n        <>\n        <div className =\"body\">\n        <h2 className = \"hAndW\">Hello and Welcome!</h2>\n        <p className =\"p\">This application will help you learn and practice the steps to determining the key signature of every scale! To begin, please choose if you would like to learn the process, or test your knowledge.</p>\n        <Button className=\"btn\" ><Link to=\"/learn\">Learn</Link></Button>\n\n        <Button className=\"btnP\"><Link to=\"/play\">Play</Link></Button>\n\n        </div>\n      \n\n\n        </>\n    )\n\n}\n\nexport default Start;","import React, {useState} from \"react\";\nimport \"../learn/learn.css\"\nimport { Link } from \"react-router-dom\";\n\n\n\n\n\nfunction Learn() {\n\n    const [state, setState] = useState({\n        q1:false,\n        major: false,\n        q2:false,\n        isCorF:false,\n        q3:false,\n        hasFlat:false\n    })\n\nfunction minor() {\n    setState({...state, major:false, q1:true})\n}\n\nfunction major() {\n    setState({...state, major: true, q1:true})\n}\n\nfunction cOrF() {\n    setState({...state, isCorF: true, q2:true})\n}\n\nfunction q2f() {\n    setState({...state,  q2:true})\n}\n\n\n\nfunction flat() {\n    setState({...state, hasFlat: true, q3:true})\n}\n\nfunction sharp() {\n    setState({...state, hasFlat: false, q3:true})\n}\n\nfunction reset() {\n    setState({q1:false,\n        major: false,\n        q2:false,\n        isCorF:false,\n        q3:false,\n        hasFlat:false})\n}\n\nfunction log() {\n    console.log(state)\n}\n\n\n\n\n\n    return (\n       \n        \n        \n        state.q1===false ? \n        <>\n        <h3 className =\"head\">This step by step guide will help you find the key signature to any scale by following a simple, step-by-step series of questions, with minimal need for memorization!</h3>\n        <h2 className =\"head\">Question 1</h2>\n        <p>Is it a Major key or Minor key?</p>\n        <button lassName= \"ansBut\" onClick={log}>current state</button>\n        <button lassName= \"ansBut\" onClick={major}>Major</button>\n        <button lassName= \"ansBut\" onClick={minor}>Minor</button>\n        </>\n\n        : \n        state.q1===true && state.major===true && state.q2===false?\n        <>\n        <h3 className =\"head\">Now that we have a major scale, it's time to ask ourselves the 2nd question: is it C major or F major?</h3>\n        <button lassName= \"ansBut\" onClick={cOrF}>Yes</button>\n        <button lassName= \"ansBut\" onClick={q2f}>No</button>\n        </>\n        :\n        state.q1===true && state.q2===true && state.isCorF===true?\n        <>\n        <p>C and F major are the only two scales that we need to memorize the key signature for. C major has NO key signature (no sharps and no flats), and F major only has Bb in its key signature.</p>\n        <h4>Once you are done memorizing, click the button!</h4>\n        <button className= \"ansBut\" onClick={reset}><Link to=\"/\">DONE!</Link></button>\n        </>\n        :\n        state.q1===true && state.q2===true && state.isCorF===false && state.q3===false?\n        <>\n        <p className =\"head\">Now we are ready to ask the final question: does the name of the scale have the word \"flat\" (or the symbol \"b\") in it? Examples that have it are Bb, Ab, Db. Examples that don't are F#, G#, A, B.</p>\n        <button className= \"ansBut\" onClick={flat}>Yes it does!</button>\n        <button className= \"ansBut\" onClick={sharp}>No it doesn't!</button>\n        <button className= \"ansBut\" onClick={log}>current state</button>\n        </>\n        :\n        state.q1===true && state.q2===true && state.q3===true && state.hasFlat===true?\n        <>\n        <p>If the scale has the word \"flat\" in it's name, (and it isn't C or F major), then we know it will have flats in it's key signature. Now we must determine which flats it has. To do so, we must first make sure we know the order of flats. Flats appear in a specific order, which is: B,E,A,D,G,C,F. It is suggested you memorize the order of sharps and flats. Here is a mnemonic device to help: Boromir Eats Arrows, Dies. Gollum Captures Frodo.</p>\n        <p>Once we know the order of flats, we simply go down the order until we find the scale name we are looking for (note for this that the order is referring to flats. This means that B = B flat, E = E flat, etc.). Once we arrived at the target note, we simply add one more flat (by order), and those flats are the key signature for that scale.</p>\n        <h3 className =\"head\">Example:</h3>\n        <p>We are looking at the scale of Db major. Going down the order of flats until we match, we get B,E,A,D. Then, adding one more by order leads us to B,E,A,D,G, and those are the flats that are in the key signature of Db major (and it's relative minor, Bb minor).</p>\n        <button className= \"ansBut\" onClick={reset}><Link to=\"/\">Got It!</Link></button>\n        </>\n        :\n        state.q1===true && state.q2===true && state.q3===true && state.hasFlat===false?\n        <>\n        <p>If the scale does not have the word \"flat\" in it's name, (and it isn't C or F major), then we know it will have sharps in it's key signature. Now we must determine which sharps it has. To do so, we must first make sure we know the order of sharps. sharps appear in a specific order, which is: F, C, G, D, A, E, B. It is suggested you memorize the order of sharps and flats. Here is a mnemonic device to help: Frodo Can Go Down And Eat Breakfast.</p>\n        <p>Once we know the order of sharps, we need to go a \"minor second\" interval below our scale name (a minor second is half a step, and one note name change). This will give us another note (so a minor second below G is F#, a minor second below C is B, etc.). Once we found this new name, we go down the order of sharps until we hit a match with this new name, and those are the sharps in the key signature for that scale.</p>\n        <h3 className =\"head\">Example:</h3>\n        <p>We are looking at the scale of A major. Going down a minor second brings us to G#. We then go down the order of sharps until we hit a match, we get F, C, G, and those are the sharps that are in the key signature of A major (and it's relative minor, F# minor).</p>\n        <button className= \"ansBut\" onClick={reset}><Link to=\"/\">Got It!</Link></button>\n        </>\n        :\n        state.q1===true && state.major===false?\n        <>\n        <p>When searching for the key signature of a minor scale, first we must find the \"relative major\" of it. A minor scale shares the same key signature of its relative major. </p>\n        <p>To find the relative major, we must move up a \"minor third\" interval from the original scale name. A minor third interval is defined as a change of 1.5 steps, and TWO note names. This means that first we must determine what will be the note name of the target scale. The note name order is: C, D, E, F, G, A, B, C. So, first we must find our original, minor scale note name (disregarding for the moment and \"b\" or \"#\" signs attached to it), and move up 2 names from it.</p>\n        <p>Next, we need to determine if the new note name (the one that is 2 above the original) has and \"b\" or \"#\" signs. To do that, we look at the 2nd part of finding a relative major: the 1.5 steps. Once we know the relative major's name, we need to account for the distance: we go back to the original, minor scale name (this time including any \"b\" or \"#\"), and we go up 1.5 steps from it. (C + 1.5 = D#, C# + 1.5 = E, Bb + 1.5 = C#, etc.) Once we have determined which sounding note is exactly 1.5 steps above our starting note, we then need to reconcile this note with the name we found in the previous step. This means that we must use \"b\" and \"#\" signs to make the note name we arrived in at step 1 SOUND like the note we arrived in at step two. Remember, 2 notes can sound the same but have different names (for example F# sounds like Gb). Also remember that there is a half step between B to C, and between E to F. </p>\n        <p>Here is a complete example of this process: original scale is G minor. Going up 2 note names brings us to B. We go up a step and a half from G to get A#/Bb. Looking at those two options, since we know the note name needs to be B, we choose Bb as the final note, meaning that the relative major to G minor is Bb major.</p>\n        <h3 className =\"head\">Found your relative major? AWESOME! Click the button when you are ready.</h3>\n        <button className= \"ansBut\" onClick={major}>FOUND IT!</button>\n        <button className= \"ansBut\" onClick={log}>current state</button>       \n        </>\n         :\n         \n         \n         <button className= \"ansBut\" onClick={log}>current state</button>\n    )\n}\n\nexport default Learn;","import React, {useState, useEffect} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction Relative() {\r\n\r\n    const scales = [\"C Major\", \"A Minor\", \"F Major\", \"D Minor\", \"Bb Major\", \"G Minor\", \"Eb Major\", \"C Minor\", \"Ab Major\", \"F Minor\", \"Db Major\", \"Bb Minor\", \"Gb Major\", \"Eb Minor\", \"Cb Major\", \"Ab Minor\", \"G Major\", \"E Minor\", \"D Major\", \"B Minor\", \"A Major\", \"F# Minor\", \"E Major\", \"C# Minor\", \"B Major\", \"G# Minor\", \"F# Major\", \"D# Minor\", \"C# Major\", \"A# Minor\"]\r\n\r\n    const [count, setCount] = useState({\r\n        yes:0,\r\n        no:0\r\n    })\r\n    \r\n    const [rand, setRand] = useState(\"\");\r\n\r\n    const [correct, setCorrect] = useState(\"\");\r\n\r\n    const [play, setPlay] = useState({\r\n        start:false\r\n    })\r\n\r\n    const coAn=()=> {\r\n        setCount({...count, yes:count.yes+1})\r\n    }\r\n\r\n    const inCoAn=()=> {\r\n        setCount({...count, no:count.no+1})\r\n    }\r\n\r\n    const start=()=> {\r\n        setPlay({start:true})\r\n        random();\r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n        answer();\r\n      }, [rand]);\r\n\r\n    const selected=(event)=> {\r\n        if (event.target.innerText === correct) {\r\n          coAn();  random();\r\n        } else inCoAn(); random();\r\n    }\r\n\r\n    const random=()=>{\r\n       let rand1 = scales[Math.floor(Math.random() * scales.length)];\r\n       setRand(rand1); \r\n    }\r\n\r\n    const test=()=> {\r\n        console.log(correct)\r\n    }\r\n\r\n    const answer=()=>{\r\n\r\n        rand===\"C Major\" ?\r\n            setCorrect(\"A Minor\")\r\n        :\r\n        rand===\"F Major\" ?\r\n            setCorrect(\"D Minor\")\r\n        :\r\n        rand===\"Bb Major\" ?\r\n            setCorrect(\"G Minor\")\r\n        :\r\n        rand===\"Eb Major\" ?\r\n            setCorrect(\"C Minor\")\r\n        :\r\n        rand===\"Ab Major\" ?\r\n            setCorrect(\"F Minor\")\r\n        :\r\n        rand===\"Db Major\" ?\r\n            setCorrect(\"Bb Minor\")\r\n        :\r\n        rand===\"Gb Major\" ?\r\n            setCorrect(\"Eb Minor\")\r\n        :\r\n        rand===\"Cb Major\" ?\r\n            setCorrect(\"Ab Minor\")\r\n        :\r\n        rand===\"G Major\" ?\r\n            setCorrect(\"E Minor\")\r\n        :\r\n        rand===\"D Major\" ?\r\n            setCorrect(\"B Minor\")\r\n        :\r\n        rand===\"A Major\" ?\r\n            setCorrect(\"F# Minor\")\r\n        :\r\n        rand===\"E Major\" ?\r\n            setCorrect(\"C# Minor\")\r\n        :\r\n        rand===\"B Major\" ?\r\n            setCorrect(\"G# Minor\")\r\n        :\r\n        rand===\"F# Major\" ?\r\n            setCorrect(\"D# Minor\")\r\n        :\r\n        rand===\"C# Major\" ?\r\n            setCorrect(\"A# Minor\")\r\n        :\r\n        rand===\"A Minor\" ?\r\n            setCorrect(\"C Major\")\r\n        :\r\n        rand===\"D Minor\" ?\r\n            setCorrect(\"F Major\")\r\n        :\r\n        rand===\"G Minor\" ?\r\n            setCorrect(\"Bb Major\")\r\n        :\r\n        rand===\"C Minor\" ?\r\n            setCorrect(\"Eb Major\")\r\n        :\r\n        rand===\"F Minor\" ?\r\n            setCorrect(\"Ab Major\")\r\n        :\r\n        rand===\"Bb Minor\" ?\r\n            setCorrect(\"Db Major\")\r\n        :\r\n        rand===\"Eb Minor\" ?\r\n            setCorrect(\"Gb Major\")\r\n        :\r\n        rand===\"Ab Minor\" ?\r\n            setCorrect(\"Cb Major\")\r\n        :\r\n        rand===\"E Minor\" ?\r\n            setCorrect(\"G Major\")\r\n        :\r\n        rand===\"B Minor\" ?\r\n            setCorrect(\"D Major\")\r\n        :\r\n        rand===\"F# Minor\" ?\r\n            setCorrect(\"A Major\")\r\n        :\r\n        rand===\"C# Minor\" ?\r\n            setCorrect(\"E Major\")\r\n        :\r\n        rand===\"G# Minor\" ?\r\n            setCorrect(\"B Major\")\r\n        :\r\n        rand===\"D# Minor\" ?\r\n            setCorrect(\"F# Major\")\r\n        :\r\n        rand===\"A# Minor\" ?\r\n            setCorrect(\"C# Major\")\r\n        \r\n        :\r\n        console.log(\"here\")\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        play.start===false?\r\n        <>\r\n        <p>In this section you will be given a random scale name, and you will need to select the relative minor/major</p>\r\n        <button onClick={start}>READY!</button>\r\n        </>\r\n        :\r\n        <>\r\n        <p>What is the relative scale of the following scale?</p>\r\n        \r\n        <h3>{rand}</h3>\r\n        {scales.sort().map((item) => (\r\n            <button onClick={selected}>{item }</button>\r\n        ))}\r\n\r\n        <div>\r\n            <h1>Correct Answers: {count.yes}</h1>\r\n            <h1>Incorrect Answers: {count.no}</h1>\r\n        </div>\r\n        <button ><Link to=\"/\">HOME</Link></button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Relative;","import React from \"react\";\r\n\r\nfunction Sharps() {\r\n    return (\r\n        <>\r\n        sharps\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Sharps;","import React from \"react\";\r\n\r\nfunction Flats() {\r\n    return (\r\n        <>\r\n        flats\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Flats;","import React from \"react\";\r\n\r\nfunction Quiz() {\r\n    return (\r\n        <>\r\n        quiz\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Quiz;","import React, {useState} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Relative from \"../relative/Relative\"\r\nimport Sharps from \"../sharps/Sharps\"\r\nimport Flats from \"../flats/Flats\"\r\nimport Quiz from \"../quiz/Quiz\"\r\n\r\nfunction Play() {\r\n\r\n    const [choiceState, setChoiceState] = useState({\r\n        choice:false,\r\n        rk: false,\r\n        sk: false,\r\n        fk: false,\r\n        qy: false\r\n    })\r\n\r\n    function relative() {\r\n        setChoiceState({...choiceState, rk:true, choice:true})\r\n    }\r\n\r\n    function sharps() {\r\n        setChoiceState({...choiceState, sk:true, choice:true})\r\n    }\r\n\r\n    function flats() {\r\n        setChoiceState({...choiceState, fk:true, choice:true})\r\n    }\r\n\r\n    function quiz() {\r\n        setChoiceState({...choiceState, qy:true, choice:true})\r\n    }\r\n\r\n    function reset() {\r\n        setChoiceState({   choice:false, rk: false,\r\n            sk: false,\r\n            fk: false,\r\n            qy: false})\r\n    }\r\n\r\n\r\n    return (\r\n        choiceState.choice===false?\r\n        <>\r\n        <p>Welcome to the play section of this app! Here you will have the opportunity to test your abilities and the things you have learned! You can practice specific topics, or try the \"quiz yourself\" section that includes all kinds of questions!</p>\r\n        <button onClick={relative}>Relative Keys</button>\r\n        <button onClick={sharps}>Sharp Keys</button>\r\n        <button onClick={flats}>Flat Keys</button>\r\n        <button onClick={quiz}>Quiz Yourself!</button>\r\n        </>\r\n        :\r\n        choiceState.choice===true && choiceState.rk===true?\r\n        <Relative />\r\n        :\r\n        choiceState.choice===true && choiceState.sk===true?\r\n        <Sharps />\r\n        :\r\n        choiceState.choice===true && choiceState.fk===true?\r\n        <Flats />\r\n        :\r\n        choiceState.choice===true && choiceState.qy===true?\r\n        <Quiz />\r\n        :\r\n        <>\r\n        <p>Click the button to return to the main menu.</p>\r\n        <button onClick={reset}><Link to=\"/\">HOME</Link></button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Play;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Start from './components/start/Start';\nimport Learn from './components/learn/Learn';\nimport Play from './components/play/Play';\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<Route exact path=\"/\" component={Start} />\n\t\t\t<Route exact path=\"/learn\" component={Learn} />\n\t\t\t<Route exact path=\"/play\" component={Play} />\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}